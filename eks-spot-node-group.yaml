Description: Spot Fleet as Node Group for EKS

Parameters:

  Proj:
    Type: String
    Default: vini

  Env:
    Type: String
    Default: dev

  FleetInstanceTypes:
    Type: CommaDelimitedList
    Default: "m5.large,m5.xlarge,m5a.large,m5a.xlarge,m4.large,m4.xlarge,c5.large,c5.xlarge,c4.large,c4.xlarge"

  InstanceKey:
    Type: AWS::EC2::KeyPair::KeyName
    Default: vini-aws-eu-central-1

  FleetTargetCapacity:
    Type: String
    Default: 3

  FleetMinCapacity:
    Type: Number
    Default: 1

  FleetMaxCapacity:
    Type: Number
    Default: 4

  CpuTargetValue:
    Type: Number
    Default: 70

  MemTargetValue:
    Type: Number
    Default: 90

  ScaleInCooldown:
    Type: Number
    Default: 240

  ScaleOutCooldown:
    Type: Number
    Default: 120

  ImageId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.

Resources:

  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${Proj}-${Env}-eks-node
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: NodeInstanceRole

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref VpcId
      Tags:
        - Key:
            !Join 
              - ''
              - kubernetes.io/cluster/
              - Fn::ImportValue: !Sub ${Proj}-${Env}-eks-cluster-name
          Value: owned

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      FromPort: 0
      ToPort: 65535
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup

  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup

  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-eks-cluster-sg
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup

  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-eks-cluster-sg
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      ToPort: 65535
      IpProtocol: tcp

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-eks-cluster-sg
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp