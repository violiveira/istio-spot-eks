Description: Spot Fleet as Node Group for EKS

Parameters:

  Proj:
    Type: String
    Default: vini

  Env:
    Type: String
    Default: dev

  InstanceTypesNodeGroup1:
    Type: CommaDelimitedList
    Default: "m5.large, m5d.large, m5n.large, m5dn.large, m5a.large, m4.large"

  InstanceKey:
    Type: AWS::EC2::KeyPair::KeyName
    Default: vini-aws-eu-central-1

  DesiredCapacityNodeGroup1:
    Type: String
    Default: 3

  MaxSizeNodeGroup1:
    Type: Number
    Default: 1

  MinSizeNodeGroup1:
    Type: Number
    Default: 4

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/eks/optimized-ami/1.17/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.

  BootstrapArguments:
    Type: String
    Default: ''
    
Resources:

  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${Proj}-${Env}-eks-node
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: NodeInstanceRole

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-vpc-id
      Tags:
        - Key:
            !Join 
              - ''
              - - kubernetes.io/cluster/
                - Fn::ImportValue: !Sub ${Proj}-${Env}-eks-cluster-name
          Value: owned

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      FromPort: 0
      ToPort: 65535
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup

  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-cluster-sg

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-cluster-sg

  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-eks-cluster-sg
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup

  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-eks-cluster-sg
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      ToPort: 65535
      IpProtocol: tcp

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId:
        Fn::ImportValue: !Sub ${Proj}-${Env}-eks-cluster-sg
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${Proj}-${Env}-fleet
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt NodeInstanceProfile.Arn
        ImageId: !Ref ImageId
        InstanceType: t3.medium
        KeyName: !Ref InstanceKey
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - Fn::ImportValue: !Sub ${Proj}-${Env}-container-instance-sg
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 50
              VolumeType: gp2
          - DeviceName: /dev/xvdcz
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 60
              VolumeType: gp2
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${Proj}-${Env}-ecs-spot
        MetadataOptions:
          'HttpPutResponseHopLimit': 2
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${Proj}-${Env} ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}

  NodeGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref DesiredCapacityNodeGroup1
      MaxSize: !Ref MaxSizeNodeGroup1
      MinSize: !Ref MinSizeNodeGroup1
      VPCZoneIdentifier:
        Fn::Split:
        - ','
        - Fn::ImportValue: !Sub ${Proj}-${Env}-vpc-public-subnets
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
          SpotInstancePools: 2
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Select [0, !Ref InstanceTypesNodeGroup1]
            - InstanceType: !Select [1, !Ref InstanceTypesNodeGroup1]
            - InstanceType: !Select [2, !Ref InstanceTypesNodeGroup1]
            - InstanceType: !Select [3, !Ref InstanceTypesNodeGroup1]
            - InstanceType: !Select [4, !Ref InstanceTypesNodeGroup1]
            - InstanceType: !Select [5, !Ref InstanceTypesNodeGroup1]
    # UpdatePolicy:
    #   AutoScalingRollingUpdate:
    #     MaxBatchSize: 1
    #     MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
    #     PauseTime: PT5M

Outputs:

  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
    Export: 
      Name: !Sub ${Proj}-${Env}-node-instance-role

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
    Export:
      Name: !Sub ${Proj}-${Env}-node-sg